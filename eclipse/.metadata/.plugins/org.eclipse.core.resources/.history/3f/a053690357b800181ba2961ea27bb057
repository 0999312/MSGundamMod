package com.spaceboyross.gundam.ms;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.lwjgl.opengl.GL11;

import com.spaceboyross.gundam.GundamMod;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelPlayer;
import net.minecraft.client.renderer.entity.Render;
import net.minecraft.client.renderer.entity.RenderLiving;
import net.minecraft.client.renderer.entity.RenderManager;
import net.minecraft.entity.Entity;
import net.minecraft.entity.monster.EntityMob;
import net.minecraftforge.client.model.b3d.B3DLoader;
import net.minecraftforge.client.model.obj.OBJLoader;
import net.minecraft.util.ResourceLocation;
import net.minecraft.world.World;
import net.minecraftforge.fml.client.registry.IRenderFactory;

public abstract class MobileSuit {

	private List<MobileSuitArmament> armaments;
	private String name;
	private String model;
	private Map<String,Integer> recipeIDs;
	private float height;
	
	public Class<? extends MSMob> MOB = MSMob.class;
	public MobileSuit.MSRender.Factory FACTORY = new MobileSuit.MSRender.Factory(this);
	
	public MobileSuit() {
		this.armaments = new ArrayList<>();
		this.recipeIDs = new HashMap<>();
		this.height = 0.0f;
	}
	
	public void setHeight(float height) {
		this.height = height;
	}
	
	public float getHeight() {
		return this.height;
	}
	
	public ResourceLocation getBaseResourceLocation() {
		return new ResourceLocation(GundamMod.MODID,"textures/entity/"+(this.model+"_"+this.name).replaceAll(" ","_"));
	}
	
	public void addRecipeItem(String id,int count) {
		this.recipeIDs.put(id,new Integer(count));
	}
	
	public int getRecipeItemCount() {
		return this.recipeIDs.size();
	}
	
	public String getRecipeItemID(int i) {
		String ids[] = new String[this.recipeIDs.keySet().size()];
		ids = this.recipeIDs.keySet().toArray(ids);
		return ids[i];
	}
	
	public Integer getRecipeItemCount(String id) {
		return this.recipeIDs.get(id);
	}
	
	public Integer getRecipeItemCount(int i) {
		return this.getRecipeItemCount(this.getRecipeItemID(i));
	}
	
	public void addArmament(MobileSuitArmament armament) {
		this.armaments.add(armament);
	}
	
	public MobileSuitArmament getArmament(int i) {
		return this.armaments.get(i);
	}
	
	public int getArmamentCount() {
		return this.armaments.size();
	}
	
	public void setName(String name) {
		this.name = name;
	}
	
	public String getName() {
		return this.name;
	}
	
	public void setModel(String model) {
		this.model = model;
	}
	
	public String getModel() {
		return this.model;
	}
	
	public static class MSMob extends EntityMob {
		
		public float scale = 1.0f;
		
		public MSMob(World worldIn) {
			super(worldIn);
			this.heal(Float.MAX_VALUE);
		}
		
		@Override
		public void onCollideWithPlayer(EntityPlayer entityIn) {
			super.onCollideWithPlayer(entityIn);
		}
	}
	
	public static class MSRender extends RenderLiving<MSMob> {
		
		private MobileSuit ms;
		
		public MSRender(RenderManager rendermanagerIn,MobileSuit ms) {
			super(rendermanagerIn,new ModelPlayer(1.0f,false),0.5f);
			this.ms = ms;
		}
		
		@Override
		public void preRenderCallback(MSMob mob,float par2) {
			this.scale(mob,par2);
		}
		
		protected void scale(MSMob mob,float par2) {
			this.shadowSize = mob.scale/2.0f;
			GL11.glScalef(mob.scale,mob.scale,mob.scale);
		}

		@Override
		protected ResourceLocation getEntityTexture(MSMob entity) {
			return new ResourceLocation(this.ms.getBaseResourceLocation()+".png");
		}
		
		private static class Factory implements IRenderFactory<MSMob> {
			
			private MobileSuit ms;
			
			public Factory(MobileSuit ms) {
				this.ms = ms;
			}
			
			@Override
			public Render<? super MSMob> createRenderFor(RenderManager manager) {
				return new MSRender(manager,this.ms);
			}
		}
	}
}
